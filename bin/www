#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app         = require('../app');
var debug       = require('debug')('lets-dog:server');
const http      = require('http');

// catch 404 and forward to error handler
app.use((req, res, next) => {
  const err = new Error('Not Found');
  err.status = 404;
  next(err);
});

app.use((err, req, res, next) => {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = process.env.ENV === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.render('error');
}); // Express middleware to handle errors

let server  = http.createServer(app);

// Socket.io
const io    = require('socket.io')(server);

const usersCoords = [];
io.on('connection', (socket) => {
  for(let i = 0; i < usersCoords.length; i++) {
    socket.emit("showOnlineUsers", usersCoords[i]);
  }
  socket.on('turnOnline', data => {
    usersCoords.push(data);
    console.log('usersCoords: ',usersCoords);
  });
});

console.log('usersCoords: ',usersCoords);

server.on('error', error => {
  if (error.syscall !== 'listen') { throw error }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`Port ${process.env.PORT} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`Port ${process.env.PORT}is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
});

server.listen(process.env.PORT, () => {
  console.log(`Listening on http://localhost:${process.env.PORT}`);
});
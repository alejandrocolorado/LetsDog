#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
const { users, users_connected, carers_connected} = require('../socket');
var debug       = require('debug')('lets-dog:server');
const http      = require('http');

// catch 404 and forward to error handler
app.use((req, res, next) => {
  const err = new Error('Not Found');
  err.status = 404;
  next(err);
});

app.use((err, req, res, next) => {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = process.env.ENV === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.render('error');
}); // Express middleware to handle errors

let server  = http.createServer(app);

/// Socket.io /////////////////////////////////////////// 

const io = require('socket.io')(server);

io.on('connection', (socket) => {
  
  for(let i = 0; i < users_connected.length; i++) {
    socket.emit("showOnlineUsers", users_connected[i]);
  }

  socket.on('carer-online', carerData => {
    carers_connected.push(carerData);
    //console.log('carers_connected: ',carers_connected)
  })

  socket.on('carer-online-moving', carerData => {
    let arrayCarrerIndex = carers_connected.forEach( (carer, index) => {
      if(carer.userId === carerData.userId){
        carers_connected[index].geometry.coordinates[0] = carerData.geometry.coordinates[0];
        carers_connected[index].geometry.coordinates[1] = carerData.geometry.coordinates[1];
        
      }
    })
    //console.log('despuÃ©s de: ', carers_connected[0].geometry)
  })

  socket.on('disconnect', userId => {
    carers_connected.splice( carers_connected.indexOf(userId), 1);
    //console.log('Current Connected Users:');
    //console.log(users_connected);
    //console.log('num connected: ', users_connected);
  })
});

/// END Socket.io /////////////////////////////////////////// 

server.on('error', error => {
  if (error.syscall !== 'listen') { throw error }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`Port ${process.env.PORT} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`Port ${process.env.PORT}is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
});

server.listen(process.env.PORT, () => {
  console.log(`Listening on http://localhost:${process.env.PORT}`);
});